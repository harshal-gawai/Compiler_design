//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class IR_reduce<R,A> implements GJVisitor<R,A> {
	public int i;
	String str = "";
	boolean flag = false;
	
	
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	
	public void append_str(String s) {
		str += s;
	}
	
	public String get_str() {
		String t = str;
		str = "";
		return t;
	}
	
	public String getNewTemp(){
	   i += 1;
	   return "TEMP " + Integer.toString(i-1) + " ";
   }
	
	
	public R visit(NodeList n, A argu) {
      R _ret=null;
      String t = "";
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
    	  t += e.nextElement().accept(this,argu);
         _count++;
      }
      _ret = (R) t; 
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         String t = "";
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            t += e.nextElement().accept(this,argu);
            _ret = (R) t; 
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      String t = "";
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         R s = e.nextElement().accept(this,argu);
         if(s!=null) {
        	 t+=s+" ";}
         _ret = (R) t;
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      String t = "";
      n.f0.accept(this, argu);
      t += "MAIN\n";
      t += (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      t += "\nEND\n\n";
      t += (String) n.f3.accept(this, argu);
      System.out.println(t);
      _ret = (R) t;
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String t = "";
      String s0 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String s2 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      flag = true;
      String s4 = (String) n.f4.accept(this, argu);
      flag = false;
      t = s0 + "[" + s2 + "]\n" + s4 + "\n";
      _ret = (R) t;
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) "NOOP\n";
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R) "ERROR\n";
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Exp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      String t = "";
      n.f0.accept(this, argu);
      String s2 = (String) n.f1.accept(this, argu);
      t = (String) get_str();
      String s3 = (String) n.f2.accept(this, argu);
      t += "CJUMP " + s2 + s3 + "\n";
      _ret = (R) t;
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String t =  "JUMP " + n.f1.accept(this, argu) + "\n";
      _ret = (R) t; 
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Exp()
    * f2 -> IntegerLiteral()
    * f3 -> Exp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      String t = "";
      n.f0.accept(this, argu);
      String s1 = (String) n.f1.accept(this, argu);
      t = get_str();
      String s2 = (String) n.f2.accept(this, argu);
      String s3 = (String) n.f3.accept(this, argu);
      t += get_str();
      t += (R) ("HSTORE " + s1 +  s2 + " " + s3 + "\n");
      _ret = (R) t;
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Exp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      String t = "";
      n.f0.accept(this, argu);
      String s1 = (String) n.f1.accept(this, argu);
      String s2 = (String) n.f2.accept(this, argu);
      String s3 = (String) n.f3.accept(this, argu);
      t = get_str() + t;
      t += "HLOAD " + s1 + " " + s2 + s3 + "\n";
      _ret = (R) t;
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      String t = "";
      n.f0.accept(this, argu);
      String s1 = (String) n.f1.accept(this, argu);
      String s2 = (String) n.f2.accept(this, argu);
      t = "MOVE "+ s1 + s2 + "\n";
      t = get_str() + t;
      _ret = (R) t;
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> Exp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      String t = "";
      n.f0.accept(this, argu);
      String s1 = (String) n.f1.accept(this, argu);
      t = get_str();
      t += "PRINT " + s1 + "\n";
      _ret = (R) t;
      return _ret;
   }

   /**
    * f0 -> StmtExp()
    *       | Call()
    *       | HAllocate()
    *       | BinOp()
    *       | Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      String s0 = (String) n.f0.accept(this, argu);
      String t = getNewTemp();
      append_str("MOVE " + t + s0 + "\n");
      _ret = (R) t; 
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> Exp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      String _ret="";
	    if(flag){
	    		flag = false;
	    	n.f0.accept(this, argu);
	    	_ret = "BEGIN\n";
	    	_ret += n.f1.accept(this, argu) + "\n";
	    	n.f2.accept(this, argu);
	    	String t = (String) n.f3.accept(this, argu);
	    	_ret += get_str();
	    	n.f4.accept(this, argu);
	    	_ret += "RETURN " + t + "END\n";
	    }
	    else{
	    	append_str(n.f1.accept(this, argu) + "\n");
	        _ret = (String) n.f3.accept(this, argu);
	      }
      return (R) _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> Exp()
    * f2 -> "("
    * f3 -> ( Exp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s1 = (String) n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String s3 = (String) n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      _ret = (R) ("CALL " + s1 + "(" + s3 + ")\n");
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> Exp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String xString = (String)n.f1.accept(this, argu);
      _ret = (R) ("HALLOCATE " + xString + " ");
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Exp()
    * f2 -> Exp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String s0 = (String) n.f0.accept(this, argu);
      String s1 = (String) n.f1.accept(this, argu);
      String s2 = (String) n.f2.accept(this, argu);
      _ret = (R) (s0+ s1 + s2 + "\n");
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) (((NodeToken) n.f0.choice).tokenImage + " ");
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String t = (String) n.f1.accept(this, argu);
      _ret = (R) ("TEMP " + t +" "); 
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) n.f0.toString();
      return _ret;
   }

}